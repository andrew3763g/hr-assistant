# backend/app/config.py
"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è HR AI Assistant
–ß—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ:

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ - –æ—Ç –ë–î –¥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏ - –ø–∞—Ä–∞–º–µ—Ç—Ä AI_PROVIDER –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É OpenAI –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∏–∑ JSON
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ - —Ñ—É–Ω–∫—Ü–∏—è check_system_ready() –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏ - –≤–≤–æ–¥ –∫–ª—é—á–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∏—Å—Ç–µ–º—ã
–†–∞–±–æ—Ç–∞ —Å Google Drive - —Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–∞–ø–æ–∫ –∏ –ø—É—Ç—å –∫ service account

üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:

API –∫–ª—é—á–∏ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–æ–¥–µ, –≤–≤–æ–¥—è—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
–õ–µ–≥–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ AI_PROVIDER
–í—Å–µ –ø—É—Ç–∏ –∏ ID –ø–∞–ø–æ–∫ Google Drive –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ (–ª–µ–≥–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)

–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã, API –∫–ª—é—á–∞–º–∏ –∏ –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º
"""

from pydantic_settings import BaseSettings, SettingsConfigDict
from typing import Optional, Dict, Any
import os
from pathlib import Path
import json


class Settings(BaseSettings):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""

    model_config = SettingsConfigDict(
        env_file='.env',
        extra='ignore',  # –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –º–æ–¥–µ–ª–∏
    )

    # === –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
    APP_NAME: str = "HR AI Assistant"
    APP_VERSION: str = "1.0.0"
    DEBUG: bool = True

    # === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
    DATABASE_URL: str = "postgresql://hruser:hrpassword@localhost:5432/hrdb"
    # –î–ª—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    DATABASE_URL_DOCKER: str = "postgresql://hruser:hrpassword@postgres:5432/hrdb"

    # === API –∫–ª—é—á–∏ (–≤–≤–æ–¥—è—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ) ===
    OPENAI_API_KEY: Optional[str] = None
    OPENAI_MODEL: str = "gpt-4-turbo-preview"  # –ú–æ–¥–µ–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞
    OPENAI_EMBEDDING_MODEL: str = "text-embedding-3-small"  # –ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    OPENAI_TTS_MODEL: str = "tts-1"  # –ú–æ–¥–µ–ª—å –¥–ª—è –æ–∑–≤—É—á–∫–∏
    OPENAI_TTS_VOICE: str = "onyx"  # –ì–æ–ª–æ—Å –ì—É—Å—Ç–∞–≤–æ (–Ω–∏–∑–∫–∏–π –±–∞—Ä–∏—Ç–æ–Ω)
    OPENAI_STT_MODEL: str = "whisper-1"  # –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ä–µ—á–∏

    # === Google Drive ===
    GOOGLE_SERVICE_ACCOUNT_FILE: str = "service_account.json"
    GOOGLE_DRIVE_FOLDERS: Optional[Dict[str, str]] = None  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ JSON

    # === –í—ã–±–æ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–¥–ª—è –±—É–¥—É—â–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏) ===
    AI_PROVIDER: str = "openai"  # –ú–æ–∂–µ—Ç –±—ã—Ç—å: "openai", "local", "gemini"
    LOCAL_MODEL_PATH: Optional[str] = None  # –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ (–Ω–∞ –±—É–¥—É—â–µ–µ)

    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é ===
    INTERVIEW_MAX_DURATION_MINUTES: int = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
    ANSWER_TIME_LIMIT_SECONDS: int = 180  # 3 –º–∏–Ω—É—Ç—ã –Ω–∞ –æ—Ç–≤–µ—Ç
    QUESTIONS_FILE: str = "questions.json"  # –§–∞–π–ª —Å –±–∞–∑–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
    EVALUATION_CRITERIA_FILE: str = "evaluation_criteria.json"  # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏

    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ü–µ–Ω–∫–∏ ===
    MIN_RESPONSE_RATE: float = 0.7  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤ (70%)
    CONFIDENCE_THRESHOLD: float = 0.9  # –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ–Ω—É—Å–∞
    CONFIDENCE_BONUS: float = 0.3  # –ë–æ–Ω—É—Å –∑–∞ —É–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (30%)
    TOP_CANDIDATES_COUNT: int = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    RESERVE_CANDIDATES_COUNT: int = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ä–µ–∑–µ—Ä–≤

    # === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö ===
    DATA_DIR: Path = Path(__file__).parent / "data"
    UPLOADS_DIR: Path = Path(__file__).parent / "uploads"
    TEMP_DIR: Path = Path(__file__).parent / "temp"

    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ ===
    HOST: str = "0.0.0.0"
    PORT: int = 8000
    CORS_ORIGINS: list = ["http://localhost:3000", "http://localhost:8000"]

    # === –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ===
    SECRET_KEY: str = "your-secret-key-change-in-production"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30

    # class Config:
    #     """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Pydantic"""
    #     env_file = ".env"
    #     case_sensitive = True

    def __init__(self, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        super().__init__(**kwargs)
        self._load_gdrive_folders()
        self._create_directories()

    def _load_gdrive_folders(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID –ø–∞–ø–æ–∫ Google Drive –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            gdrive_config_path = self.DATA_DIR / "gdrive_folders.json"
            if gdrive_config_path.exists():
                with open(gdrive_config_path, 'r', encoding='utf-8') as f:
                    self.GOOGLE_DRIVE_FOLDERS = json.load(f)
            else:
                # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
                self.GOOGLE_DRIVE_FOLDERS = {
                    "resumes": "1U9pZtW1dZ9dZxjZ3_L8IeONTOsn6Jj8N",
                    "vacancies": "1dhL1s3TRmlcAImPwxl9bdbnIQWRzEkBg",
                    "audio": "12rlp3qCB-17m7RAYHNmsA14RO3Zpxu3V",
                    "text": "1UR35VxnnQadUZxt5WgjcqIJ3olr6O0Ka",
                    "reports": "1HoWTQTHo4jz9ynCLcpC0PnwI01fAYIdW",
                    "questions": "1m7yu8EbRm8S6ehlvcd1xsucELIcJCTMRDS_U8b3bEeM"
                }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Drive: {e}")
            self.GOOGLE_DRIVE_FOLDERS = {}

    def _create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        for directory in [self.DATA_DIR, self.UPLOADS_DIR, self.TEMP_DIR]:
            directory.mkdir(parents=True, exist_ok=True)

    def load_questions(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        questions_path = self.DATA_DIR / self.QUESTIONS_FILE
        try:
            if questions_path.exists():
                with open(questions_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                print(f"–§–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {questions_path}")
                return []
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return []

    def load_evaluation_criteria(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        criteria_path = self.DATA_DIR / self.EVALUATION_CRITERIA_FILE
        try:
            if criteria_path.exists():
                with open(criteria_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return {
                    "auto_reject": {
                        "identity_mismatch": ["name", "gender", "age"],
                        "red_flags": list(range(7, 21)),  # –í–æ–ø—Ä–æ—Å—ã 7-20
                        "min_response_rate": self.MIN_RESPONSE_RATE
                    },
                    "scoring": {
                        "base_score_per_answer": 1,
                        "no_answer_penalty": 0,
                        "skill_no_answer_penalty": -0.5,
                        "confidence_bonus": self.CONFIDENCE_BONUS,
                        "confidence_threshold": self.CONFIDENCE_THRESHOLD
                    },
                    "ranking": {
                        "next_stage": self.TOP_CANDIDATES_COUNT,
                        "reserve": self.RESERVE_CANDIDATES_COUNT
                    }
                }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏: {e}")
            return {}

    def get_database_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ Docker
        if os.path.exists('/.dockerenv'):
            return self.DATABASE_URL_DOCKER
        return self.DATABASE_URL

    def is_ai_configured(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        if self.AI_PROVIDER == "openai":
            return bool(self.OPENAI_API_KEY and self.OPENAI_API_KEY.startswith('sk-'))
        elif self.AI_PROVIDER == "local":
            return bool(self.LOCAL_MODEL_PATH and Path(self.LOCAL_MODEL_PATH).exists())
        return False

    def set_api_key(self, key: str, provider: str = "openai"):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if provider == "openai":
            self.OPENAI_API_KEY = key
            os.environ['OPENAI_API_KEY'] = key
            print(f"‚úì OpenAI API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_gdrive_folder_id(self, folder_type: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–∞–ø–∫–∏ Google Drive –ø–æ —Ç–∏–ø—É"""
        if self.GOOGLE_DRIVE_FOLDERS:
            return self.GOOGLE_DRIVE_FOLDERS.get(folder_type)
        return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
def check_system_ready() -> tuple[bool, list[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º)
    """
    issues = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ AI
    if not settings.is_ai_configured():
        issues.append("AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google Service Account
    service_account_path = Path(settings.GOOGLE_SERVICE_ACCOUNT_FILE)
    if not service_account_path.exists():
        issues.append(f"–§–∞–π–ª service account –Ω–µ –Ω–∞–π–¥–µ–Ω: {service_account_path}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    if not settings.DATA_DIR.exists():
        issues.append(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {settings.DATA_DIR}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    questions_path = settings.DATA_DIR / settings.QUESTIONS_FILE
    if not questions_path.exists():
        issues.append(f"–§–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {questions_path}")

    return len(issues) == 0, issues


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
__all__ = ['settings', 'Settings', 'check_system_ready']