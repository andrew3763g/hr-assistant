# backend/app/models/candidate.py
"""
–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–•—Ä–∞–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö, –∏—Ö —Ä–µ–∑—é–º–µ –∏ —Å—Ç–∞—Ç—É—Å–µ

–ß—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ –º–æ–¥–µ–ª–∏:

–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ:

–§–ò–û, –ø–æ–ª, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!)
–ö–æ–Ω—Ç–∞–∫—Ç—ã, –ª–æ–∫–∞—Ü–∏—è, –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø—ã—Ç
–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞–≤—ã–∫–∏


–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:

gender - –¥–ª—è —Å–≤–µ—Ä–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤—å—é
birth_date/age - –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è
has_second_citizenship - –∫—Ä–∞—Å–Ω—ã–π —Ñ–ª–∞–≥
has_red_flags - –±—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è


GPT-–∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ:

–°–∞–º–º–∞—Ä–∏, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–∏
–£—Ä–æ–≤–µ–Ω—å –∫–∞—Ä—å–µ—Ä—ã


–°—Ç–∞—Ç—É—Å—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ - –æ—Ç NEW –¥–æ REJECTED/APPROVED
–ü–æ–ª–µ–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã:

get_full_name() - –ø–æ–ª–Ω–æ–µ –§–ò–û
is_adult() - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è
has_required_experience() - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—ã—Ç–∞



üîë –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

Enum –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤, –ø–æ–ª–∞, —É—Ä–æ–≤–Ω—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
JSON –ø–æ–ª—è –¥–ª—è –≥–∏–±–∫–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –∏ —è–∑—ã–∫–æ–≤
–°–≤—è–∑–∏ —Å –∏–Ω—Ç–µ—Ä–≤—å—é, –æ—Ü–µ–Ω–∫–∞–º–∏ –∏ –º–∞—Ç—á–∏–Ω–≥–æ–º
"""

from sqlalchemy import Column, Integer, String, Text, Float, JSON, DateTime, Boolean, Enum
from sqlalchemy.orm import relationship
from datetime import datetime
import enum
from typing import Dict, List, Optional

from ..database import Base


class CandidateStatus(str, enum.Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    NEW = "new"  # –ù–æ–≤—ã–π, —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–µ–Ω
    PARSED = "parsed"  # –†–µ–∑—é–º–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ
    MATCHED = "matched"  # –ü–æ–¥–æ–±—Ä–∞–Ω –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
    INVITED = "invited"  # –ü—Ä–∏–≥–ª–∞—à–µ–Ω –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
    INTERVIEW_SCHEDULED = "scheduled"  # –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞–∑–Ω–∞—á–µ–Ω–æ
    INTERVIEW_COMPLETED = "completed"  # –ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–π–¥–µ–Ω–æ
    EVALUATING = "evaluating"  # –ù–∞ –æ—Ü–µ–Ω–∫–µ
    APPROVED = "approved"  # –û–¥–æ–±—Ä–µ–Ω (—Ç–æ–ø-5)
    RESERVED = "reserved"  # –í —Ä–µ–∑–µ—Ä–≤–µ (6-10)
    REJECTED = "rejected"  # –û—Ç–∫–ª–æ–Ω–µ–Ω
    WITHDRAWN = "withdrawn"  # –°–Ω—è–ª –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É


class Gender(str, enum.Enum):
    """–ü–æ–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    MALE = "male"
    FEMALE = "female"
    NOT_SPECIFIED = "not_specified"


class EducationLevel(str, enum.Enum):
    """–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    SECONDARY = "secondary"  # –°—Ä–µ–¥–Ω–µ–µ
    SECONDARY_SPECIAL = "secondary_special"  # –°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ
    INCOMPLETE_HIGHER = "incomplete_higher"  # –ù–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ
    BACHELOR = "bachelor"  # –ë–∞–∫–∞–ª–∞–≤—Ä
    MASTER = "master"  # –ú–∞–≥–∏—Å—Ç—Ä
    SPECIALIST = "specialist"  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
    PHD = "phd"  # –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞—É–∫
    DOCTOR = "doctor"  # –î–æ–∫—Ç–æ—Ä –Ω–∞—É–∫


class Candidate(Base):
    """–ú–æ–¥–µ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    __tablename__ = "candidates"

    # === –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è ===
    id = Column(Integer, primary_key=True, index=True)

    # === –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–∑ —Ä–µ–∑—é–º–µ) ===
    last_name = Column(String(100), nullable=False, comment="–§–∞–º–∏–ª–∏—è")
    first_name = Column(String(100), nullable=False, comment="–ò–º—è")
    middle_name = Column(String(100), nullable=True, comment="–û—Ç—á–µ—Å—Ç–≤–æ")

    # –ü–æ–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    gender = Column(Enum(Gender), default=Gender.NOT_SPECIFIED, comment="–ü–æ–ª")

    # –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≤–æ–∑—Ä–∞—Å—Ç
    birth_date = Column(DateTime, nullable=True, comment="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    age = Column(Integer, nullable=True, comment="–í–æ–∑—Ä–∞—Å—Ç")

    # === –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
    email = Column(String(255), unique=True, nullable=False, index=True, comment="Email")
    phone = Column(String(50), nullable=True, comment="–¢–µ–ª–µ—Ñ–æ–Ω")
    location = Column(String(255), nullable=True, comment="–ì–æ—Ä–æ–¥/–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç")

    # === –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∏ —è–∑—ã–∫–∏ ===
    citizenship = Column(String(100), default="–†–§", comment="–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
    has_second_citizenship = Column(Boolean, default=False, comment="–ï—Å—Ç—å –≤—Ç–æ—Ä–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ")
    languages = Column(JSON, default=dict, comment="–Ø–∑—ã–∫–∏: {'—Ä—É—Å—Å–∫–∏–π': '—Ä–æ–¥–Ω–æ–π', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π': 'B2'}")

    # === –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
    position_desired = Column(String(255), nullable=True, comment="–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
    salary_expectation = Column(Integer, nullable=True, comment="–û–∂–∏–¥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞")

    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    total_experience_years = Column(Float, nullable=True, comment="–û–±—â–∏–π —Å—Ç–∞–∂ –≤ –≥–æ–¥–∞—Ö")
    relevant_experience_years = Column(Float, nullable=True, comment="–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ–ø—ã—Ç –≤ –≥–æ–¥–∞—Ö")
    last_position = Column(String(255), nullable=True, comment="–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
    last_company = Column(String(255), nullable=True, comment="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã")

    # === –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ===
    education_level = Column(Enum(EducationLevel), nullable=True, comment="–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
    education_institution = Column(String(500), nullable=True, comment="–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ")
    education_speciality = Column(String(255), nullable=True, comment="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
    has_degree = Column(Boolean, default=False, comment="–ï—Å—Ç—å —É—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å")

    # === –ù–∞–≤—ã–∫–∏ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (–∏–∑ GPT –ø–∞—Ä—Å–∏–Ω–≥–∞) ===
    core_skills = Column(JSON, default=list, comment="–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ ['Python', 'SQL', ...]")
    soft_skills = Column(JSON, default=list, comment="Soft skills ['–∫–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞', ...]")
    industries = Column(JSON, default=list, comment="–û—Ç—Ä–∞—Å–ª–∏ –æ–ø—ã—Ç–∞ ['–±–∞–Ω–∫–∏', 'IT', ...]")
    achievements = Column(JSON, default=list, comment="–ö–ª—é—á–µ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")

    # === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ===
    has_car = Column(Boolean, default=False, comment="–ï—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
    drivers_license = Column(String(50), nullable=True, comment="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∞–≤")
    ready_for_business_trips = Column(Boolean, default=True, comment="–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º")
    ready_for_relocation = Column(Boolean, default=False, comment="–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–µ–∑–¥—É")

    # === –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—é–º–µ ===
    resume_text = Column(Text, nullable=True, comment="–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ")
    resume_file_path = Column(String(500), nullable=True, comment="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ä–µ–∑—é–º–µ")
    resume_gdrive_id = Column(String(255), nullable=True, comment="ID —Ñ–∞–π–ª–∞ –≤ Google Drive")

    # === GPT –∞–Ω–∞–ª–∏–∑ ===
    gpt_summary = Column(Text, nullable=True, comment="–ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –æ—Ç GPT")
    gpt_strengths = Column(JSON, default=list, comment="–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ –º–Ω–µ–Ω–∏—é GPT")
    gpt_potential_roles = Column(JSON, default=list, comment="–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–∏ –ø–æ –º–Ω–µ–Ω–∏—é GPT")
    gpt_career_level = Column(String(50), nullable=True, comment="–£—Ä–æ–≤–µ–Ω—å: junior/middle/senior/lead")

    # === –°—Ç–∞—Ç—É—Å –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ===
    status = Column(Enum(CandidateStatus), default=CandidateStatus.NEW, index=True, comment="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")

    # –§–ª–∞–≥–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    is_active = Column(Boolean, default=True, comment="–ê–∫—Ç–∏–≤–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
    is_verified = Column(Boolean, default=False, comment="–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    has_red_flags = Column(Boolean, default=False, comment="–ï—Å—Ç—å –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏")

    # === –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ ===
    created_at = Column(DateTime, default=datetime.utcnow, comment="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, comment="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    parsed_at = Column(DateTime, nullable=True, comment="–î–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—é–º–µ")
    last_activity_at = Column(DateTime, nullable=True, comment="–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

    # === –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ ===
    # –ò–Ω—Ç–µ—Ä–≤—å—é –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    interviews = relationship("Interview", back_populates="candidate", cascade="all, delete-orphan")
    # –û—Ü–µ–Ω–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    evaluations = relationship("Evaluation", back_populates="candidate", cascade="all, delete-orphan")
    # –ú–∞—Ç—á–∏–Ω–≥ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    matches = relationship(
        "VacancyMatch",
        back_populates="candidate",
        cascade="all, delete-orphan",
    )

    # === –ú–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏ ===

    def get_full_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –§–ò–û"""
        parts = [self.last_name, self.first_name]
        if self.middle_name:
            parts.append(self.middle_name)
        return " ".join(filter(None, parts))

    def get_short_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è (–§–∞–º–∏–ª–∏—è –ò.–û.)"""
        initials = f"{self.first_name[0]}."
        if self.middle_name:
            initials += f"{self.middle_name[0]}."
        return f"{self.last_name} {initials}"

    def get_age_from_birth_date(self) -> Optional[int]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not self.birth_date:
            return None
        today = datetime.now()
        age = today.year - self.birth_date.year
        if today.month < self.birth_date.month or \
                (today.month == self.birth_date.month and today.day < self.birth_date.day):
            age -= 1
        return age

    def is_adult(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ"""
        age = self.age or self.get_age_from_birth_date()
        return age >= 18 if age else False

    def has_required_experience(self, years: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞"""
        return self.total_experience_years >= years if self.total_experience_years else False

    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        return {
            "id": self.id,
            "full_name": self.get_full_name(),
            "email": self.email,
            "phone": self.phone,
            "location": self.location,
            "age": self.age,
            "gender": self.gender.value if self.gender else None,
            "position_desired": self.position_desired,
            "experience_years": self.total_experience_years,
            "education_level": self.education_level.value if self.education_level else None,
            "skills": self.core_skills,
            "status": self.status.value if self.status else None,
            "created_at": self.created_at.isoformat() if self.created_at else None
        }

    def __repr__(self):
        return f"<Candidate(id={self.id}, name={self.get_full_name()}, status={self.status.value})>"

    def __str__(self):
        return self.get_full_name()

# === –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ ===
# –°–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
# - email (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π)
# - status
# - is_active + status (—Å–æ—Å—Ç–∞–≤–Ω–æ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)