# backend/app/database.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL
–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, —Å–µ—Å—Å–∏—è–º–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ç–∞–±–ª–∏—Ü

–ß—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –º–æ–¥—É–ª–µ:

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSQL —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î –∏ Docker
–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∂–∏–≤–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
Dependency Injection –¥–ª—è FastAPI —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é get_db()
Context manager –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–Ω–µ FastAPI
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü –∏ –∏–Ω–¥–µ–∫—Å–æ–≤
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º

üîë –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ/Docker)
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∂–∏–≤–æ—Å—Ç–∏
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ context manager
–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
"""

from sqlalchemy import create_engine, event, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.pool import Pool
from contextlib import contextmanager
import logging
from typing import Generator
import time

from .config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ë–î
logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLAlchemy ===

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
DATABASE_URL = settings.DATABASE_URL

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
engine = create_engine(
    DATABASE_URL,
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    pool_size=5,  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
    max_overflow=10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø—É–ª–∞
    pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    pool_recycle=3600,  # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
    # echo=settings.DEBUG,  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PostgreSQL
    connect_args={
        "connect_timeout": 10,  # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        "options": "-c timezone=utc"  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
    }
)

# –≤–∫–ª—é—á–µ–Ω–∏–µ echo –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ DEBUG ‚Äî —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ getattr
if getattr(settings, "DEBUG", False):
    engine.echo = True

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(
    autocommit=False,  # –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    autoflush=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π flush
    bind=engine,
    expire_on_commit=False  # –û–±—ä–µ–∫—Ç—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ—Å–ª–µ commit
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
Base.metadata.naming_convention = {
    "ix": "ix_%(column_0_label)s",  # –ò–Ω–¥–µ–∫—Å—ã
    "uq": "uq_%(table_name)s_%(column_0_name)s",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    "ck": "ck_%(table_name)s_%(constraint_name)s",  # Check –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",  # –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
    "pk": "pk_%(table_name)s"  # –ü–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏
}


# === –°–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ===

@event.listens_for(Pool, "connect")
def set_sqlite_pragma(dbapi_conn, connection_record):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è PostgreSQL
    cursor = dbapi_conn.cursor()
    cursor.execute("SET statement_timeout = '30s'")  # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ 30 —Å–µ–∫—É–Ω–¥
    cursor.close()


@event.listens_for(Pool, "checkout")
def ping_connection(dbapi_conn, connection_record, connection_proxy):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –ø—É–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ–µ
    cursor = dbapi_conn.cursor()
    try:
        cursor.execute("SELECT 1")
    except:
        # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ, –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        raise Exception("Connection failed ping test")
    finally:
        cursor.close()


# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ ===

def get_db() -> Generator[Session, None, None]:
    """
    Dependency –¥–ª—è FastAPI - —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –ë–î
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        @app.get("/")
        def read_root(db: Session = Depends(get_db)):
            return db.query(Model).all()
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


@contextmanager
def get_db_session() -> Generator[Session, None, None]:
    """
    Context manager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î –≤–Ω–µ FastAPI
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        with get_db_session() as session:
            session.query(Model).all()
    """
    db = SessionLocal()
    try:
        yield db
        db.commit()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π commit –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
    except Exception:
        db.rollback()  # –û—Ç–∫–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
        raise
    finally:
        db.close()


# === –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î ===

def init_database():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
        from app.models import candidate, vacancy, interview, evaluation

        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        Base.metadata.create_all(bind=engine)

        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        with engine.connect() as conn:
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ email
            conn.execute(text("""
                              CREATE INDEX IF NOT EXISTS idx_candidates_email
                                  ON candidates(email);
                              """))

            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Å—Ç–∞—Ç—É—Å—É
            conn.execute(text("""
                              CREATE INDEX IF NOT EXISTS idx_interviews_status
                                  ON interviews(status);
                              """))

            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ü–µ–Ω–æ–∫ –ø–æ –±–∞–ª–ª–∞–º
            conn.execute(text("""
                              CREATE INDEX IF NOT EXISTS idx_evaluations_score
                                  ON evaluations(total_score DESC);
                              """))

            conn.commit()

        logger.info("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        check_database_connection()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise


def check_database_connection() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
    """
    max_retries = 3
    retry_delay = 2  # —Å–µ–∫—É–Ω–¥—ã

    for attempt in range(max_retries):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            with engine.connect() as conn:
                result = conn.execute(text("SELECT 1"))
                result.fetchone()
                logger.info("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True

        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < max_retries - 1:
                time.sleep(retry_delay)
            else:
                logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False

    return False


def drop_all_tables():
    """
    –í–ù–ò–ú–ê–ù–ò–ï: –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
    """
    if settings.DEBUG:
        logger.warning("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        Base.metadata.drop_all(bind=engine)
        logger.info("–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
    else:
        logger.error("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ DEBUG")
        raise PermissionError("Cannot drop tables in production mode")


def get_database_stats() -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
    """
    stats = {}

    with engine.connect() as conn:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        result = conn.execute(text("""
                                   SELECT tablename
                                   FROM pg_tables
                                   WHERE schemaname = 'public'
                                   """))

        tables = [row[0] for row in result]

        # –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        for table in tables:
            try:
                result = conn.execute(text(f"SELECT COUNT(*) FROM {table}"))
                count = result.fetchone()[0]
                stats[table] = count
            except Exception as e:
                stats[table] = f"Error: {e}"

    return stats


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ ===

def execute_in_transaction(func, *args, **kwargs):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
    """
    with get_db_session() as session:
        try:
            result = func(session, *args, **kwargs)
            session.commit()
            return result
        except Exception as e:
            session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
            raise


# === –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π) ===

class SimpleMigrationManager:
    """–ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è MVP"""

    @staticmethod
    def create_initial_data():
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î"""
        with get_db_session() as session:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            pass

    @staticmethod
    def upgrade_schema():
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –ë–î –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Alembic
        # –î–ª—è MVP –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        init_database()


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
__all__ = [
    'engine',
    'SessionLocal',
    'Base',
    'get_db',
    'get_db_session',
    'init_database',
    'check_database_connection',
    'get_database_stats',
    'execute_in_transaction',
    'SimpleMigrationManager'
]