"""init interviews & evaluations

Revision ID: f8cf86386a7f
Revises: 
Create Date: 2025-09-06 10:54:52.074481

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f8cf86386a7f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('candidates',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False, comment='Фамилия'),
    sa.Column('first_name', sa.String(length=100), nullable=False, comment='Имя'),
    sa.Column('middle_name', sa.String(length=100), nullable=True, comment='Отчество'),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'NOT_SPECIFIED', name='gender'), nullable=True, comment='Пол'),
    sa.Column('birth_date', sa.DateTime(), nullable=True, comment='Дата рождения'),
    sa.Column('age', sa.Integer(), nullable=True, comment='Возраст'),
    sa.Column('email', sa.String(length=255), nullable=False, comment='Email'),
    sa.Column('phone', sa.String(length=50), nullable=True, comment='Телефон'),
    sa.Column('location', sa.String(length=255), nullable=True, comment='Город/населенный пункт'),
    sa.Column('citizenship', sa.String(length=100), nullable=True, comment='Гражданство'),
    sa.Column('has_second_citizenship', sa.Boolean(), nullable=True, comment='Есть второе гражданство'),
    sa.Column('languages', sa.JSON(), nullable=True, comment="Языки: {'русский': 'родной', 'английский': 'B2'}"),
    sa.Column('position_desired', sa.String(length=255), nullable=True, comment='Желаемая должность'),
    sa.Column('salary_expectation', sa.Integer(), nullable=True, comment='Ожидаемая зарплата'),
    sa.Column('total_experience_years', sa.Float(), nullable=True, comment='Общий стаж в годах'),
    sa.Column('relevant_experience_years', sa.Float(), nullable=True, comment='Релевантный опыт в годах'),
    sa.Column('last_position', sa.String(length=255), nullable=True, comment='Последняя должность'),
    sa.Column('last_company', sa.String(length=255), nullable=True, comment='Последнее место работы'),
    sa.Column('education_level', sa.Enum('SECONDARY', 'SECONDARY_SPECIAL', 'INCOMPLETE_HIGHER', 'BACHELOR', 'MASTER', 'SPECIALIST', 'PHD', 'DOCTOR', name='educationlevel'), nullable=True, comment='Уровень образования'),
    sa.Column('education_institution', sa.String(length=500), nullable=True, comment='Учебное заведение'),
    sa.Column('education_speciality', sa.String(length=255), nullable=True, comment='Специальность'),
    sa.Column('has_degree', sa.Boolean(), nullable=True, comment='Есть ученая степень'),
    sa.Column('core_skills', sa.JSON(), nullable=True, comment="Ключевые навыки ['Python', 'SQL', ...]"),
    sa.Column('soft_skills', sa.JSON(), nullable=True, comment="Soft skills ['командная работа', ...]"),
    sa.Column('industries', sa.JSON(), nullable=True, comment="Отрасли опыта ['банки', 'IT', ...]"),
    sa.Column('achievements', sa.JSON(), nullable=True, comment='Ключевые достижения'),
    sa.Column('has_car', sa.Boolean(), nullable=True, comment='Есть автомобиль'),
    sa.Column('drivers_license', sa.String(length=50), nullable=True, comment='Категории прав'),
    sa.Column('ready_for_business_trips', sa.Boolean(), nullable=True, comment='Готов к командировкам'),
    sa.Column('ready_for_relocation', sa.Boolean(), nullable=True, comment='Готов к переезду'),
    sa.Column('resume_text', sa.Text(), nullable=True, comment='Полный текст резюме'),
    sa.Column('resume_file_path', sa.String(length=500), nullable=True, comment='Путь к файлу резюме'),
    sa.Column('resume_gdrive_id', sa.String(length=255), nullable=True, comment='ID файла в Google Drive'),
    sa.Column('gpt_summary', sa.Text(), nullable=True, comment='Краткое саммари от GPT'),
    sa.Column('gpt_strengths', sa.JSON(), nullable=True, comment='Сильные стороны по мнению GPT'),
    sa.Column('gpt_potential_roles', sa.JSON(), nullable=True, comment='Подходящие роли по мнению GPT'),
    sa.Column('gpt_career_level', sa.String(length=50), nullable=True, comment='Уровень: junior/middle/senior/lead'),
    sa.Column('status', sa.Enum('NEW', 'PARSED', 'MATCHED', 'INVITED', 'INTERVIEW_SCHEDULED', 'INTERVIEW_COMPLETED', 'EVALUATING', 'APPROVED', 'RESERVED', 'REJECTED', 'WITHDRAWN', name='candidatestatus'), nullable=True, comment='Текущий статус'),
    sa.Column('is_active', sa.Boolean(), nullable=True, comment='Активен в системе'),
    sa.Column('is_verified', sa.Boolean(), nullable=True, comment='Данные проверены'),
    sa.Column('has_red_flags', sa.Boolean(), nullable=True, comment='Есть красные флаги'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Дата создания записи'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата обновления'),
    sa.Column('parsed_at', sa.DateTime(), nullable=True, comment='Дата парсинга резюме'),
    sa.Column('last_activity_at', sa.DateTime(), nullable=True, comment='Последняя активность'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_candidates'))
    )
    op.create_index(op.f('ix_candidates_email'), 'candidates', ['email'], unique=True)
    op.create_index(op.f('ix_candidates_id'), 'candidates', ['id'], unique=False)
    op.create_index(op.f('ix_candidates_status'), 'candidates', ['status'], unique=False)
    op.create_table('vacancies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False, comment='Название позиции'),
    sa.Column('department', sa.String(length=255), nullable=True, comment='Департамент/отдел'),
    sa.Column('company_name', sa.String(length=255), nullable=True, comment='Название компании'),
    sa.Column('location', sa.String(length=255), nullable=False, comment='Город/офис'),
    sa.Column('address', sa.String(length=500), nullable=True, comment='Точный адрес офиса'),
    sa.Column('description', sa.Text(), nullable=True, comment='Полное описание вакансии'),
    sa.Column('responsibilities', sa.JSON(), nullable=True, comment='Должностные обязанности'),
    sa.Column('requirements_mandatory', sa.JSON(), nullable=True, comment='Обязательные требования'),
    sa.Column('requirements_optional', sa.JSON(), nullable=True, comment='Желательные требования'),
    sa.Column('hard_skills', sa.JSON(), nullable=True, comment="Hard skills ['Python', 'SQL', ...]"),
    sa.Column('soft_skills', sa.JSON(), nullable=True, comment="Soft skills ['командная работа', ...]"),
    sa.Column('skill_levels', sa.JSON(), nullable=True, comment="Уровни навыков {'Python': 'advanced', ...}"),
    sa.Column('experience_years_min', sa.Float(), nullable=True, comment='Минимальный опыт в годах'),
    sa.Column('experience_years_max', sa.Float(), nullable=True, comment='Максимальный опыт в годах'),
    sa.Column('experience_level', sa.Enum('NO_EXPERIENCE', 'JUNIOR', 'MIDDLE', 'SENIOR', 'LEAD', 'EXPERT', name='experiencelevel'), nullable=True, comment='Уровень опыта'),
    sa.Column('education_required', sa.String(length=255), nullable=True, comment='Требования к образованию'),
    sa.Column('speciality_required', sa.String(length=255), nullable=True, comment='Требуемая специальность'),
    sa.Column('employment_type', sa.Enum('FULL_TIME', 'PART_TIME', 'CONTRACT', 'INTERNSHIP', 'FREELANCE', name='employmenttype'), nullable=True, comment='Тип занятости'),
    sa.Column('work_format', sa.Enum('OFFICE', 'REMOTE', 'HYBRID', 'FLEXIBLE', name='workformat'), nullable=True, comment='Формат работы'),
    sa.Column('salary_min', sa.Integer(), nullable=True, comment='Минимальная зарплата'),
    sa.Column('salary_max', sa.Integer(), nullable=True, comment='Максимальная зарплата'),
    sa.Column('salary_currency', sa.String(length=10), nullable=True, comment='Валюта зарплаты'),
    sa.Column('salary_gross', sa.Boolean(), nullable=True, comment='Gross (true) или Net (false)'),
    sa.Column('has_probation', sa.Boolean(), nullable=True, comment='Есть испытательный срок'),
    sa.Column('probation_months', sa.Integer(), nullable=True, comment='Длительность испытательного срока'),
    sa.Column('business_trips_required', sa.Boolean(), nullable=True, comment='Требуются командировки'),
    sa.Column('business_trips_frequency', sa.String(length=100), nullable=True, comment='Частота командировок'),
    sa.Column('relocation_assistance', sa.Boolean(), nullable=True, comment='Помощь с релокацией'),
    sa.Column('benefits', sa.JSON(), nullable=True, comment="Бенефиты ['ДМС', 'обучение', ...]"),
    sa.Column('team_size', sa.Integer(), nullable=True, comment='Размер команды'),
    sa.Column('reports_to', sa.String(length=255), nullable=True, comment='Кому подчиняется'),
    sa.Column('subordinates_count', sa.Integer(), nullable=True, comment='Количество подчиненных'),
    sa.Column('custom_questions', sa.JSON(), nullable=True, comment='Дополнительные вопросы для этой вакансии'),
    sa.Column('skill_questions_template', sa.JSON(), nullable=True, comment='Шаблоны вопросов по навыкам'),
    sa.Column('gpt_summary', sa.Text(), nullable=True, comment='Краткое описание от GPT'),
    sa.Column('gpt_key_requirements', sa.JSON(), nullable=True, comment='Ключевые требования по мнению GPT'),
    sa.Column('gpt_ideal_candidate', sa.Text(), nullable=True, comment='Портрет идеального кандидата от GPT'),
    sa.Column('gpt_interview_focus', sa.JSON(), nullable=True, comment='На что обратить внимание на интервью'),
    sa.Column('evaluation_weights', sa.JSON(), nullable=True, comment='Веса критериев оценки для этой вакансии'),
    sa.Column('min_score_threshold', sa.Float(), nullable=True, comment='Минимальный проходной балл'),
    sa.Column('auto_reject_criteria', sa.JSON(), nullable=True, comment='Дополнительные критерии автоотказа'),
    sa.Column('views_count', sa.Integer(), nullable=True, comment='Количество просмотров'),
    sa.Column('applications_count', sa.Integer(), nullable=True, comment='Количество откликов'),
    sa.Column('interviews_scheduled', sa.Integer(), nullable=True, comment='Назначено интервью'),
    sa.Column('interviews_completed', sa.Integer(), nullable=True, comment='Проведено интервью'),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'INTERVIEWING', 'ON_HOLD', 'CLOSED', 'CANCELLED', name='vacancystatus'), nullable=True, comment='Статус вакансии'),
    sa.Column('is_urgent', sa.Boolean(), nullable=True, comment='Срочная вакансия'),
    sa.Column('is_hot', sa.Boolean(), nullable=True, comment='Горячая вакансия'),
    sa.Column('priority', sa.Integer(), nullable=True, comment='Приоритет (чем выше, тем важнее)'),
    sa.Column('created_at', sa.DateTime(), nullable=True, comment='Дата создания'),
    sa.Column('updated_at', sa.DateTime(), nullable=True, comment='Дата обновления'),
    sa.Column('published_at', sa.DateTime(), nullable=True, comment='Дата публикации'),
    sa.Column('deadline_at', sa.DateTime(), nullable=True, comment='Дедлайн закрытия вакансии'),
    sa.Column('closed_at', sa.DateTime(), nullable=True, comment='Дата закрытия'),
    sa.Column('source_file_path', sa.String(length=500), nullable=True, comment='Путь к исходному файлу'),
    sa.Column('source_gdrive_id', sa.String(length=255), nullable=True, comment='ID файла в Google Drive'),
    sa.Column('original_text', sa.Text(), nullable=True, comment='Оригинальный текст вакансии'),
    sa.Column('hr_manager_name', sa.String(length=255), nullable=True, comment='ФИО HR менеджера'),
    sa.Column('hr_manager_contact', sa.String(length=255), nullable=True, comment='Контакт HR менеджера'),
    sa.Column('hiring_manager_name', sa.String(length=255), nullable=True, comment='ФИО нанимающего менеджера'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vacancies'))
    )
    op.create_index(op.f('ix_vacancies_id'), 'vacancies', ['id'], unique=False)
    op.create_index(op.f('ix_vacancies_status'), 'vacancies', ['status'], unique=False)
    op.create_index(op.f('ix_vacancies_title'), 'vacancies', ['title'], unique=False)
    op.create_table('interviews',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('candidate_id', sa.Integer(), nullable=False),
    sa.Column('vacancy_id', sa.Integer(), nullable=False),
    sa.Column('interview_token', sa.String(length=255), nullable=False, comment='Уникальный токен для доступа к интервью'),
    sa.Column('interview_url', sa.String(length=500), nullable=False, comment='Ссылка на интервью'),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('progress_percent', sa.Integer(), nullable=True, comment='Прогресс прохождения в %'),
    sa.Column('questions_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Массив вопросов с их типами и настройками'),
    sa.Column('total_questions', sa.Integer(), nullable=False, comment='Общее количество вопросов'),
    sa.Column('answered_questions', sa.Integer(), nullable=True, comment='Количество отвеченных вопросов'),
    sa.Column('skipped_questions', sa.Integer(), nullable=True, comment='Количество пропущенных вопросов'),
    sa.Column('answers_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Словарь ответов {question_id: answer_data}'),
    sa.Column('audio_recordings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Ссылки на аудиозаписи ответов'),
    sa.Column('transcriptions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Транскрипции ответов от Whisper'),
    sa.Column('browser_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Информация о браузере кандидата'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='IP адрес кандидата'),
    sa.Column('total_duration_seconds', sa.Integer(), nullable=True, comment='Общая длительность интервью'),
    sa.Column('average_answer_time', sa.Float(), nullable=True, comment='Среднее время ответа'),
    sa.Column('red_flags_triggered', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Сработавшие красные флаги'),
    sa.Column('identity_verification', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Результаты проверки личности'),
    sa.Column('technical_issues', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Технические проблемы во время интервью'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='Когда кандидат начал'),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='Когда завершено'),
    sa.Column('evaluated_at', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='Когда оценено'),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=True, comment='Срок действия ссылки'),
    sa.Column('audio_gdrive_id', sa.String(length=255), nullable=True, comment='ID аудио в Google Drive'),
    sa.Column('transcript_gdrive_id', sa.String(length=255), nullable=True, comment='ID транскрипта в GDrive'),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], name=op.f('fk_interviews_candidate_id_candidates')),
    sa.ForeignKeyConstraint(['vacancy_id'], ['vacancies.id'], name=op.f('fk_interviews_vacancy_id_vacancies')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_interviews'))
    )
    op.create_index('ix_interviews_candidate_id', 'interviews', ['candidate_id'], unique=False)
    op.create_index(op.f('ix_interviews_id'), 'interviews', ['id'], unique=False)
    op.create_index(op.f('ix_interviews_interview_token'), 'interviews', ['interview_token'], unique=True)
    op.create_index('ix_interviews_started_at', 'interviews', ['started_at'], unique=False)
    op.create_index('ix_interviews_status', 'interviews', ['status'], unique=False)
    op.create_index('ix_interviews_vacancy_id', 'interviews', ['vacancy_id'], unique=False)
    op.create_table('vacancy_matches',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('candidate_id', sa.Integer(), nullable=False),
    sa.Column('vacancy_id', sa.Integer(), nullable=False),
    sa.Column('match_score', sa.Float(), nullable=False, comment='Общий балл соответствия (0-100)'),
    sa.Column('match_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Детали соответствия'),
    sa.Column('skills_coverage', sa.Float(), nullable=True, comment='Процент покрытия навыков'),
    sa.Column('experience_fit', sa.Float(), nullable=True, comment='Соответствие опыта'),
    sa.Column('salary_fit', sa.Float(), nullable=True, comment='Соответствие по зарплате'),
    sa.Column('gpt_match_reasoning', sa.Text(), nullable=True, comment='Обоснование матча от GPT'),
    sa.Column('gpt_recommended', sa.Boolean(), nullable=True, comment='Рекомендован GPT'),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('interview_scheduled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], name=op.f('fk_vacancy_matches_candidate_id_candidates')),
    sa.ForeignKeyConstraint(['vacancy_id'], ['vacancies.id'], name=op.f('fk_vacancy_matches_vacancy_id_vacancies')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_vacancy_matches')),
    sa.UniqueConstraint('candidate_id', 'vacancy_id', name='uq_candidate_vacancy')
    )
    op.create_index('ix_vacancy_matches_candidate_vacancy', 'vacancy_matches', ['candidate_id', 'vacancy_id'], unique=False)
    op.create_index(op.f('ix_vacancy_matches_id'), 'vacancy_matches', ['id'], unique=False)
    op.create_index('ix_vacancy_matches_match_score', 'vacancy_matches', ['match_score'], unique=False)
    op.create_table('evaluations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('interview_id', sa.Integer(), nullable=False),
    sa.Column('candidate_id', sa.Integer(), nullable=False),
    sa.Column('total_score', sa.Float(), nullable=False, comment='Итоговый балл'),
    sa.Column('max_possible_score', sa.Float(), nullable=False, comment='Максимально возможный балл'),
    sa.Column('score_percentage', sa.Float(), nullable=False, comment='Процент от максимума'),
    sa.Column('scores_breakdown', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Разбивка баллов по категориям'),
    sa.Column('response_rate', sa.Float(), nullable=False, comment='Процент отвеченных вопросов'),
    sa.Column('confidence_average', sa.Float(), nullable=True, comment='Средняя уверенность'),
    sa.Column('identity_match', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Результаты сверки с резюме'),
    sa.Column('red_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Список сработавших красных флагов'),
    sa.Column('auto_reject_reasons', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Причины автоматического отказа'),
    sa.Column('strengths', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Выявленные сильные стороны'),
    sa.Column('weaknesses', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Выявленные слабые стороны'),
    sa.Column('skills_match', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Соответствие требуемым навыкам'),
    sa.Column('decision', sa.String(length=50), nullable=False, comment='Финальное решение'),
    sa.Column('rank_in_vacancy', sa.Integer(), nullable=True, comment='Место среди кандидатов'),
    sa.Column('percentile', sa.Float(), nullable=True, comment='Процентиль среди всех'),
    sa.Column('hr_recommendations', sa.Text(), nullable=True, comment='Рекомендации для HR'),
    sa.Column('follow_up_questions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Вопросы для очного интервью'),
    sa.Column('areas_to_probe', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Области для углубленной проверки'),
    sa.Column('gpt_summary', sa.Text(), nullable=True, comment='Саммари от GPT'),
    sa.Column('gpt_personality_insights', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Инсайты о личности от GPT'),
    sa.Column('gpt_cultural_fit', sa.Float(), nullable=True, comment='Оценка культурного соответствия'),
    sa.Column('report_generated', sa.Boolean(), nullable=True),
    sa.Column('report_gdrive_id', sa.String(length=255), nullable=True, comment='ID отчета в GDrive'),
    sa.Column('notification_sent', sa.Boolean(), nullable=True),
    sa.Column('notification_template', sa.String(length=100), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('hr_reviewed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('hr_override_decision', sa.String(length=50), nullable=True, comment='Решение HR'),
    sa.Column('hr_comments', sa.Text(), nullable=True),
    sa.Column('hr_adjusted_score', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], name=op.f('fk_evaluations_candidate_id_candidates')),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], name=op.f('fk_evaluations_interview_id_interviews')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_evaluations')),
    sa.UniqueConstraint('interview_id', name=op.f('uq_evaluations_interview_id'))
    )
    op.create_index('ix_evaluations_candidate_id', 'evaluations', ['candidate_id'], unique=False)
    op.create_index('ix_evaluations_decision', 'evaluations', ['decision'], unique=False)
    op.create_index(op.f('ix_evaluations_id'), 'evaluations', ['id'], unique=False)
    op.create_index('ix_evaluations_interview_id', 'evaluations', ['interview_id'], unique=False)
    op.create_index('ix_evaluations_total_score', 'evaluations', ['total_score'], unique=False)
    op.create_table('interview_answers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('interview_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('answer_text', sa.Text(), nullable=True, comment='Транскрипция ответа'),
    sa.Column('answer_audio_url', sa.String(length=500), nullable=True, comment='Ссылка на аудио'),
    sa.Column('duration_seconds', sa.Integer(), nullable=True, comment='Длительность ответа'),
    sa.Column('confidence_score', sa.Float(), nullable=True, comment='Уверенность в ответе'),
    sa.Column('is_answered', sa.Boolean(), nullable=True),
    sa.Column('is_skipped', sa.Boolean(), nullable=True),
    sa.Column('is_timeout', sa.Boolean(), nullable=True),
    sa.Column('ai_analysis', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Анализ ответа от GPT'),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.Column('answered_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], name=op.f('fk_interview_answers_interview_id_interviews')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_interview_answers'))
    )
    op.create_index(op.f('ix_interview_answers_id'), 'interview_answers', ['id'], unique=False)
    op.create_index('ix_interview_answers_interview_question', 'interview_answers', ['interview_id', 'question_id'], unique=False)
    op.create_table('interview_messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('interview_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.Enum('INTERVIEWER', 'CANDIDATE', 'SYSTEM', name='messagerole'), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('question_type', sa.String(length=50), nullable=True),
    sa.Column('expected_competencies', sa.JSON(), nullable=True),
    sa.Column('response_time_seconds', sa.Integer(), nullable=True),
    sa.Column('word_count', sa.Integer(), nullable=True),
    sa.Column('answer_score', sa.Integer(), nullable=True),
    sa.Column('answer_evaluation', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], name=op.f('fk_interview_messages_interview_id_interviews')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_interview_messages'))
    )
    op.create_index(op.f('ix_interview_messages_id'), 'interview_messages', ['id'], unique=False)
    op.create_table('interview_questions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('interview_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False, comment='ID вопроса из базы'),
    sa.Column('question_text', sa.Text(), nullable=False),
    sa.Column('question_type', sa.String(length=50), nullable=False),
    sa.Column('question_category', sa.String(length=50), nullable=False),
    sa.Column('order_index', sa.Integer(), nullable=False, comment='Порядок в интервью'),
    sa.Column('is_required', sa.Boolean(), nullable=True),
    sa.Column('time_limit_seconds', sa.Integer(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], name=op.f('fk_interview_questions_interview_id_interviews')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_interview_questions'))
    )
    op.create_index(op.f('ix_interview_questions_id'), 'interview_questions', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_interview_questions_id'), table_name='interview_questions')
    op.drop_table('interview_questions')
    op.drop_index(op.f('ix_interview_messages_id'), table_name='interview_messages')
    op.drop_table('interview_messages')
    op.drop_index('ix_interview_answers_interview_question', table_name='interview_answers')
    op.drop_index(op.f('ix_interview_answers_id'), table_name='interview_answers')
    op.drop_table('interview_answers')
    op.drop_index('ix_evaluations_total_score', table_name='evaluations')
    op.drop_index('ix_evaluations_interview_id', table_name='evaluations')
    op.drop_index(op.f('ix_evaluations_id'), table_name='evaluations')
    op.drop_index('ix_evaluations_decision', table_name='evaluations')
    op.drop_index('ix_evaluations_candidate_id', table_name='evaluations')
    op.drop_table('evaluations')
    op.drop_index('ix_vacancy_matches_match_score', table_name='vacancy_matches')
    op.drop_index(op.f('ix_vacancy_matches_id'), table_name='vacancy_matches')
    op.drop_index('ix_vacancy_matches_candidate_vacancy', table_name='vacancy_matches')
    op.drop_table('vacancy_matches')
    op.drop_index('ix_interviews_vacancy_id', table_name='interviews')
    op.drop_index('ix_interviews_status', table_name='interviews')
    op.drop_index('ix_interviews_started_at', table_name='interviews')
    op.drop_index(op.f('ix_interviews_interview_token'), table_name='interviews')
    op.drop_index(op.f('ix_interviews_id'), table_name='interviews')
    op.drop_index('ix_interviews_candidate_id', table_name='interviews')
    op.drop_table('interviews')
    op.drop_index(op.f('ix_vacancies_title'), table_name='vacancies')
    op.drop_index(op.f('ix_vacancies_status'), table_name='vacancies')
    op.drop_index(op.f('ix_vacancies_id'), table_name='vacancies')
    op.drop_table('vacancies')
    op.drop_index(op.f('ix_candidates_status'), table_name='candidates')
    op.drop_index(op.f('ix_candidates_id'), table_name='candidates')
    op.drop_index(op.f('ix_candidates_email'), table_name='candidates')
    op.drop_table('candidates')
    # ### end Alembic commands ###
