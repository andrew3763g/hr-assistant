"""create interview_evaluations table

Revision ID: 812664fcf5ec
Revises: 4a9a2026e490
Create Date: 2025-09-12 15:45:54.856358

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '812664fcf5ec'
down_revision: Union[str, Sequence[str], None] = '4a9a2026e490'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('interview_evaluations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('candidate_id', sa.Integer(), nullable=False),
    sa.Column('vacancy_id', sa.Integer(), nullable=False),
    sa.Column('match_score', sa.Float(), nullable=False, comment='Общий балл соответствия (0-100)'),
    sa.Column('match_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Детали соответствия'),
    sa.Column('skills_coverage', sa.Float(), nullable=True, comment='Процент покрытия навыков'),
    sa.Column('experience_fit', sa.Float(), nullable=True, comment='Соответствие опыта'),
    sa.Column('salary_fit', sa.Float(), nullable=True, comment='Соответствие по зарплате'),
    sa.Column('gpt_match_reasoning', sa.Text(), nullable=True, comment='Обоснование матча от GPT'),
    sa.Column('gpt_recommended', sa.Boolean(), nullable=True, comment='Рекомендован GPT'),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('interview_scheduled', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], name=op.f('fk_interview_evaluations_candidate_id_candidates')),
    sa.ForeignKeyConstraint(['vacancy_id'], ['vacancies.id'], name=op.f('fk_interview_evaluations_vacancy_id_vacancies')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_interview_evaluations')),
    sa.UniqueConstraint('candidate_id', 'vacancy_id', name='uq_interview_evaluations_candidate_vacancy')
    )
    op.create_index('ix_interview_evaluations_candidate_vacancy', 'interview_evaluations', ['candidate_id', 'vacancy_id'], unique=False)
    op.create_index(op.f('ix_interview_evaluations_id'), 'interview_evaluations', ['id'], unique=False)
    op.create_index('ix_interview_evaluations_match_score', 'interview_evaluations', ['match_score'], unique=False)
    op.add_column('vacancy_matches', sa.Column('score', sa.Integer(), nullable=True))
    op.drop_index(op.f('ix_vacancy_matches_candidate_vacancy'), table_name='vacancy_matches')
    op.drop_index(op.f('ix_vacancy_matches_id'), table_name='vacancy_matches')
    op.drop_constraint(op.f('uq_candidate_vacancy'), 'vacancy_matches', type_='unique')
    op.create_index('ix_vacancy_match_candidate', 'vacancy_matches', ['candidate_id'], unique=False)
    op.create_index('ix_vacancy_match_vacancy', 'vacancy_matches', ['vacancy_id'], unique=False)
    op.create_index(op.f('ix_vacancy_matches_candidate_id'), 'vacancy_matches', ['candidate_id'], unique=False)
    op.create_index(op.f('ix_vacancy_matches_vacancy_id'), 'vacancy_matches', ['vacancy_id'], unique=False)
    op.create_unique_constraint('uq_vacancy_candidate', 'vacancy_matches', ['vacancy_id', 'candidate_id'])
    op.drop_constraint(op.f('fk_vacancy_matches_candidate_id_candidates'), 'vacancy_matches', type_='foreignkey')
    op.drop_constraint(op.f('fk_vacancy_matches_vacancy_id_vacancies'), 'vacancy_matches', type_='foreignkey')
    op.create_foreign_key(op.f('fk_vacancy_matches_candidate_id_candidates'), 'vacancy_matches', 'candidates', ['candidate_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('fk_vacancy_matches_vacancy_id_vacancies'), 'vacancy_matches', 'vacancies', ['vacancy_id'], ['id'], ondelete='CASCADE')
    op.drop_column('vacancy_matches', 'gpt_match_reasoning')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vacancy_matches', sa.Column('gpt_match_reasoning', sa.TEXT(), autoincrement=False, nullable=True, comment='Обоснование матча от GPT'))
    op.drop_constraint(op.f('fk_vacancy_matches_vacancy_id_vacancies'), 'vacancy_matches', type_='foreignkey')
    op.drop_constraint(op.f('fk_vacancy_matches_candidate_id_candidates'), 'vacancy_matches', type_='foreignkey')
    op.create_foreign_key(op.f('fk_vacancy_matches_vacancy_id_vacancies'), 'vacancy_matches', 'vacancies', ['vacancy_id'], ['id'])
    op.create_foreign_key(op.f('fk_vacancy_matches_candidate_id_candidates'), 'vacancy_matches', 'candidates', ['candidate_id'], ['id'])
    op.drop_constraint('uq_vacancy_candidate', 'vacancy_matches', type_='unique')
    op.drop_index(op.f('ix_vacancy_matches_vacancy_id'), table_name='vacancy_matches')
    op.drop_index(op.f('ix_vacancy_matches_candidate_id'), table_name='vacancy_matches')
    op.drop_index('ix_vacancy_match_vacancy', table_name='vacancy_matches')
    op.drop_index('ix_vacancy_match_candidate', table_name='vacancy_matches')
    op.create_unique_constraint(op.f('uq_candidate_vacancy'), 'vacancy_matches', ['candidate_id', 'vacancy_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_vacancy_matches_id'), 'vacancy_matches', ['id'], unique=False)
    op.create_index(op.f('ix_vacancy_matches_candidate_vacancy'), 'vacancy_matches', ['candidate_id', 'vacancy_id'], unique=False)
    op.drop_column('vacancy_matches', 'score')
    op.drop_index('ix_interview_evaluations_match_score', table_name='interview_evaluations')
    op.drop_index(op.f('ix_interview_evaluations_id'), table_name='interview_evaluations')
    op.drop_index('ix_interview_evaluations_candidate_vacancy', table_name='interview_evaluations')
    op.drop_table('interview_evaluations')
    # ### end Alembic commands ###
