"""sync models

Revision ID: f96b6a424729
Revises: 35fe5d9e9926
Create Date: 2025-09-17 17:32:35.333174

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f96b6a424729'
down_revision: Union[str, Sequence[str], None] = '35fe5d9e9926'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('candidates', 'doc_hash',
               existing_type=sa.VARCHAR(length=64),
               comment='SHA-256 исходника для дедупа',
               existing_nullable=True)
    op.drop_index(op.f('ix_candidates_status'), table_name='candidates')
    op.drop_constraint(op.f('uq_candidates_doc_hash'), 'candidates', type_='unique')
    op.drop_index(op.f('ix_candidates_doc_hash'), table_name='candidates')
    op.create_index(op.f('ix_candidates_doc_hash'), 'candidates', ['doc_hash'], unique=True)
    op.drop_column('candidates', 'core_skills')
    op.drop_column('candidates', 'has_red_flags')
    op.drop_column('candidates', 'parsed_at')
    op.drop_column('candidates', 'is_verified')
    op.drop_column('candidates', 'gpt_potential_roles')
    op.drop_column('candidates', 'education_speciality')
    op.drop_column('candidates', 'has_second_citizenship')
    op.drop_column('candidates', 'resume_text')
    op.drop_column('candidates', 'ready_for_relocation')
    op.drop_column('candidates', 'total_experience_years')
    op.drop_column('candidates', 'ready_for_business_trips')
    op.drop_column('candidates', 'gender')
    op.drop_column('candidates', 'drivers_license')
    op.drop_column('candidates', 'last_activity_at')
    op.drop_column('candidates', 'education_level')
    op.drop_column('candidates', 'is_active')
    op.drop_column('candidates', 'education_institution')
    op.drop_column('candidates', 'birth_date')
    op.drop_column('candidates', 'gpt_career_level')
    op.drop_column('candidates', 'relevant_experience_years')
    op.drop_column('candidates', 'last_company')
    op.drop_column('candidates', 'middle_name')
    op.drop_column('candidates', 'location')
    op.drop_column('candidates', 'soft_skills')
    op.drop_column('candidates', 'phone')
    op.drop_column('candidates', 'position_desired')
    op.drop_column('candidates', 'last_position')
    op.drop_column('candidates', 'updated_at')
    op.drop_column('candidates', 'industries')
    op.drop_column('candidates', 'salary_expectation')
    op.drop_column('candidates', 'languages')
    op.drop_column('candidates', 'citizenship')
    op.drop_column('candidates', 'gpt_strengths')
    op.drop_column('candidates', 'age')
    op.drop_column('candidates', 'status')
    op.drop_column('candidates', 'achievements')
    op.drop_column('candidates', 'gpt_summary')
    op.drop_column('candidates', 'has_car')
    op.drop_column('candidates', 'has_degree')
    op.drop_index(op.f('ix_vacancies_status'), table_name='vacancies')
    op.drop_column('vacancies', 'probation_months')
    op.drop_column('vacancies', 'custom_questions')
    op.drop_column('vacancies', 'company_name')
    op.drop_column('vacancies', 'deadline_at')
    op.drop_column('vacancies', 'interviews_completed')
    op.drop_column('vacancies', 'views_count')
    op.drop_column('vacancies', 'gpt_interview_focus')
    op.drop_column('vacancies', 'experience_years_min')
    op.drop_column('vacancies', 'published_at')
    op.drop_column('vacancies', 'auto_reject_criteria')
    op.drop_column('vacancies', 'has_probation')
    op.drop_column('vacancies', 'evaluation_weights')
    op.drop_column('vacancies', 'department')
    op.drop_column('vacancies', 'requirements_optional')
    op.drop_column('vacancies', 'experience_years_max')
    op.drop_column('vacancies', 'subordinates_count')
    op.drop_column('vacancies', 'address')
    op.drop_column('vacancies', 'salary_currency')
    op.drop_column('vacancies', 'hr_manager_name')
    op.drop_column('vacancies', 'is_urgent')
    op.drop_column('vacancies', 'benefits')
    op.drop_column('vacancies', 'hiring_manager_name')
    op.drop_column('vacancies', 'salary_gross')
    op.drop_column('vacancies', 'skill_questions_template')
    op.drop_column('vacancies', 'location')
    op.drop_column('vacancies', 'hard_skills')
    op.drop_column('vacancies', 'soft_skills')
    op.drop_column('vacancies', 'min_score_threshold')
    op.drop_column('vacancies', 'closed_at')
    op.drop_column('vacancies', 'salary_min')
    op.drop_column('vacancies', 'applications_count')
    op.drop_column('vacancies', 'skill_levels')
    op.drop_column('vacancies', 'requirements_mandatory')
    op.drop_column('vacancies', 'responsibilities')
    op.drop_column('vacancies', 'employment_type')
    op.drop_column('vacancies', 'team_size')
    op.drop_column('vacancies', 'business_trips_frequency')
    op.drop_column('vacancies', 'interviews_scheduled')
    op.drop_column('vacancies', 'relocation_assistance')
    op.drop_column('vacancies', 'business_trips_required')
    op.drop_column('vacancies', 'work_format')
    op.drop_column('vacancies', 'hr_manager_contact')
    op.drop_column('vacancies', 'speciality_required')
    op.drop_column('vacancies', 'is_hot')
    op.drop_column('vacancies', 'experience_level')
    op.drop_column('vacancies', 'salary_max')
    op.drop_column('vacancies', 'gpt_key_requirements')
    op.drop_column('vacancies', 'reports_to')
    op.drop_column('vacancies', 'gpt_ideal_candidate')
    op.drop_column('vacancies', 'education_required')
    op.drop_column('vacancies', 'status')
    op.drop_column('vacancies', 'priority')
    op.drop_column('vacancies', 'gpt_summary')
    op.drop_column('vacancies', 'updated_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vacancies', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Дата обновления'))
    op.add_column('vacancies', sa.Column('gpt_summary', sa.TEXT(), autoincrement=False, nullable=True, comment='Краткое описание от GPT'))
    op.add_column('vacancies', sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True, comment='Приоритет (чем выше, тем важнее)'))
    op.add_column('vacancies', sa.Column('status', postgresql.ENUM('DRAFT', 'ACTIVE', 'INTERVIEWING', 'ON_HOLD', 'CLOSED', 'CANCELLED', name='vacancystatus'), autoincrement=False, nullable=True, comment='Статус вакансии'))
    op.add_column('vacancies', sa.Column('education_required', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Требования к образованию'))
    op.add_column('vacancies', sa.Column('gpt_ideal_candidate', sa.TEXT(), autoincrement=False, nullable=True, comment='Портрет идеального кандидата от GPT'))
    op.add_column('vacancies', sa.Column('reports_to', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Кому подчиняется'))
    op.add_column('vacancies', sa.Column('gpt_key_requirements', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Ключевые требования по мнению GPT'))
    op.add_column('vacancies', sa.Column('salary_max', sa.INTEGER(), autoincrement=False, nullable=True, comment='Максимальная зарплата'))
    op.add_column('vacancies', sa.Column('experience_level', postgresql.ENUM('NO_EXPERIENCE', 'JUNIOR', 'MIDDLE', 'SENIOR', 'LEAD', 'EXPERT', name='experiencelevel'), autoincrement=False, nullable=True, comment='Уровень опыта'))
    op.add_column('vacancies', sa.Column('is_hot', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Горячая вакансия'))
    op.add_column('vacancies', sa.Column('speciality_required', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Требуемая специальность'))
    op.add_column('vacancies', sa.Column('hr_manager_contact', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Контакт HR менеджера'))
    op.add_column('vacancies', sa.Column('work_format', postgresql.ENUM('OFFICE', 'REMOTE', 'HYBRID', 'FLEXIBLE', name='workformat'), autoincrement=False, nullable=True, comment='Формат работы'))
    op.add_column('vacancies', sa.Column('business_trips_required', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Требуются командировки'))
    op.add_column('vacancies', sa.Column('relocation_assistance', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Помощь с релокацией'))
    op.add_column('vacancies', sa.Column('interviews_scheduled', sa.INTEGER(), autoincrement=False, nullable=True, comment='Назначено интервью'))
    op.add_column('vacancies', sa.Column('business_trips_frequency', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Частота командировок'))
    op.add_column('vacancies', sa.Column('team_size', sa.INTEGER(), autoincrement=False, nullable=True, comment='Размер команды'))
    op.add_column('vacancies', sa.Column('employment_type', postgresql.ENUM('FULL_TIME', 'PART_TIME', 'CONTRACT', 'INTERNSHIP', 'FREELANCE', name='employmenttype'), autoincrement=False, nullable=True, comment='Тип занятости'))
    op.add_column('vacancies', sa.Column('responsibilities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Должностные обязанности'))
    op.add_column('vacancies', sa.Column('requirements_mandatory', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Обязательные требования'))
    op.add_column('vacancies', sa.Column('skill_levels', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="Уровни навыков {'Python': 'advanced', ...}"))
    op.add_column('vacancies', sa.Column('applications_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='Количество откликов'))
    op.add_column('vacancies', sa.Column('salary_min', sa.INTEGER(), autoincrement=False, nullable=True, comment='Минимальная зарплата'))
    op.add_column('vacancies', sa.Column('closed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Дата закрытия'))
    op.add_column('vacancies', sa.Column('min_score_threshold', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='Минимальный проходной балл'))
    op.add_column('vacancies', sa.Column('soft_skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="Soft skills ['командная работа', ...]"))
    op.add_column('vacancies', sa.Column('hard_skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="Hard skills ['Python', 'SQL', ...]"))
    op.add_column('vacancies', sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Город/офис'))
    op.add_column('vacancies', sa.Column('skill_questions_template', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Шаблоны вопросов по навыкам'))
    op.add_column('vacancies', sa.Column('salary_gross', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Gross (true) или Net (false)'))
    op.add_column('vacancies', sa.Column('hiring_manager_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='ФИО нанимающего менеджера'))
    op.add_column('vacancies', sa.Column('benefits', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="Бенефиты ['ДМС', 'обучение', ...]"))
    op.add_column('vacancies', sa.Column('is_urgent', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Срочная вакансия'))
    op.add_column('vacancies', sa.Column('hr_manager_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='ФИО HR менеджера'))
    op.add_column('vacancies', sa.Column('salary_currency', sa.VARCHAR(length=10), autoincrement=False, nullable=True, comment='Валюта зарплаты'))
    op.add_column('vacancies', sa.Column('address', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='Точный адрес офиса'))
    op.add_column('vacancies', sa.Column('subordinates_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='Количество подчиненных'))
    op.add_column('vacancies', sa.Column('experience_years_max', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='Максимальный опыт в годах'))
    op.add_column('vacancies', sa.Column('requirements_optional', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Желательные требования'))
    op.add_column('vacancies', sa.Column('department', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Департамент/отдел'))
    op.add_column('vacancies', sa.Column('evaluation_weights', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Веса критериев оценки для этой вакансии'))
    op.add_column('vacancies', sa.Column('has_probation', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Есть испытательный срок'))
    op.add_column('vacancies', sa.Column('auto_reject_criteria', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Дополнительные критерии автоотказа'))
    op.add_column('vacancies', sa.Column('published_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Дата публикации'))
    op.add_column('vacancies', sa.Column('experience_years_min', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='Минимальный опыт в годах'))
    op.add_column('vacancies', sa.Column('gpt_interview_focus', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='На что обратить внимание на интервью'))
    op.add_column('vacancies', sa.Column('views_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='Количество просмотров'))
    op.add_column('vacancies', sa.Column('interviews_completed', sa.INTEGER(), autoincrement=False, nullable=True, comment='Проведено интервью'))
    op.add_column('vacancies', sa.Column('deadline_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Дедлайн закрытия вакансии'))
    op.add_column('vacancies', sa.Column('company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Название компании'))
    op.add_column('vacancies', sa.Column('custom_questions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Дополнительные вопросы для этой вакансии'))
    op.add_column('vacancies', sa.Column('probation_months', sa.INTEGER(), autoincrement=False, nullable=True, comment='Длительность испытательного срока'))
    op.create_index(op.f('ix_vacancies_status'), 'vacancies', ['status'], unique=False)
    op.add_column('candidates', sa.Column('has_degree', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Есть ученая степень'))
    op.add_column('candidates', sa.Column('has_car', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Есть автомобиль'))
    op.add_column('candidates', sa.Column('gpt_summary', sa.TEXT(), autoincrement=False, nullable=True, comment='Краткое саммари от GPT'))
    op.add_column('candidates', sa.Column('achievements', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Ключевые достижения'))
    op.add_column('candidates', sa.Column('status', postgresql.ENUM('NEW', 'PARSED', 'MATCHED', 'INVITED', 'INTERVIEW_SCHEDULED', 'INTERVIEW_COMPLETED', 'EVALUATING', 'APPROVED', 'RESERVED', 'REJECTED', 'WITHDRAWN', name='candidatestatus'), autoincrement=False, nullable=True, comment='Текущий статус'))
    op.add_column('candidates', sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=True, comment='Возраст'))
    op.add_column('candidates', sa.Column('gpt_strengths', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Сильные стороны по мнению GPT'))
    op.add_column('candidates', sa.Column('citizenship', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Гражданство'))
    op.add_column('candidates', sa.Column('languages', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="Языки: {'русский': 'родной', 'английский': 'B2'}"))
    op.add_column('candidates', sa.Column('salary_expectation', sa.INTEGER(), autoincrement=False, nullable=True, comment='Ожидаемая зарплата'))
    op.add_column('candidates', sa.Column('industries', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="Отрасли опыта ['банки', 'IT', ...]"))
    op.add_column('candidates', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Дата обновления'))
    op.add_column('candidates', sa.Column('last_position', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Последняя должность'))
    op.add_column('candidates', sa.Column('position_desired', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Желаемая должность'))
    op.add_column('candidates', sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Телефон'))
    op.add_column('candidates', sa.Column('soft_skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="Soft skills ['командная работа', ...]"))
    op.add_column('candidates', sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Город/населенный пункт'))
    op.add_column('candidates', sa.Column('middle_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Отчество'))
    op.add_column('candidates', sa.Column('last_company', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Последнее место работы'))
    op.add_column('candidates', sa.Column('relevant_experience_years', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='Релевантный опыт в годах'))
    op.add_column('candidates', sa.Column('gpt_career_level', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Уровень: junior/middle/senior/lead'))
    op.add_column('candidates', sa.Column('birth_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Дата рождения'))
    op.add_column('candidates', sa.Column('education_institution', sa.VARCHAR(length=500), autoincrement=False, nullable=True, comment='Учебное заведение'))
    op.add_column('candidates', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Активен в системе'))
    op.add_column('candidates', sa.Column('education_level', postgresql.ENUM('SECONDARY', 'SECONDARY_SPECIAL', 'INCOMPLETE_HIGHER', 'BACHELOR', 'MASTER', 'SPECIALIST', 'PHD', 'DOCTOR', name='educationlevel'), autoincrement=False, nullable=True, comment='Уровень образования'))
    op.add_column('candidates', sa.Column('last_activity_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Последняя активность'))
    op.add_column('candidates', sa.Column('drivers_license', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Категории прав'))
    op.add_column('candidates', sa.Column('gender', postgresql.ENUM('MALE', 'FEMALE', 'NOT_SPECIFIED', name='gender'), autoincrement=False, nullable=True, comment='Пол'))
    op.add_column('candidates', sa.Column('ready_for_business_trips', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Готов к командировкам'))
    op.add_column('candidates', sa.Column('total_experience_years', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True, comment='Общий стаж в годах'))
    op.add_column('candidates', sa.Column('ready_for_relocation', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Готов к переезду'))
    op.add_column('candidates', sa.Column('resume_text', sa.TEXT(), autoincrement=False, nullable=True, comment='Полный текст резюме'))
    op.add_column('candidates', sa.Column('has_second_citizenship', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Есть второе гражданство'))
    op.add_column('candidates', sa.Column('education_speciality', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Специальность'))
    op.add_column('candidates', sa.Column('gpt_potential_roles', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='Подходящие роли по мнению GPT'))
    op.add_column('candidates', sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Данные проверены'))
    op.add_column('candidates', sa.Column('parsed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Дата парсинга резюме'))
    op.add_column('candidates', sa.Column('has_red_flags', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='Есть красные флаги'))
    op.add_column('candidates', sa.Column('core_skills', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment="Ключевые навыки ['Python', 'SQL', ...]"))
    op.drop_index(op.f('ix_candidates_doc_hash'), table_name='candidates')
    op.create_index(op.f('ix_candidates_doc_hash'), 'candidates', ['doc_hash'], unique=False)
    op.create_unique_constraint(op.f('uq_candidates_doc_hash'), 'candidates', ['doc_hash'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_candidates_status'), 'candidates', ['status'], unique=False)
    op.alter_column('candidates', 'doc_hash',
               existing_type=sa.VARCHAR(length=64),
               comment=None,
               existing_comment='SHA-256 исходника для дедупа',
               existing_nullable=True)
    # ### end Alembic commands ###
